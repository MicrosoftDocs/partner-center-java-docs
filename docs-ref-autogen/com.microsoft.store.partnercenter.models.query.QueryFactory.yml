### YamlMime:ManagedReference
items:
- uid: "com.microsoft.store.partnercenter.models.query.QueryFactory"
  id: "QueryFactory"
  parent: "com.microsoft.store.partnercenter.models.query"
  children:
  - "com.microsoft.store.partnercenter.models.query.QueryFactory.buildCountQuery()"
  - "com.microsoft.store.partnercenter.models.query.QueryFactory.buildCountQuery(com.microsoft.store.partnercenter.models.query.filters.FieldFilter)"
  - "com.microsoft.store.partnercenter.models.query.QueryFactory.buildCountQuery(com.microsoft.store.partnercenter.models.query.filters.FieldFilter,java.lang.Object)"
  - "com.microsoft.store.partnercenter.models.query.QueryFactory.buildIndexedQuery(int)"
  - "com.microsoft.store.partnercenter.models.query.QueryFactory.buildIndexedQuery(int,int)"
  - "com.microsoft.store.partnercenter.models.query.QueryFactory.buildIndexedQuery(int,int,com.microsoft.store.partnercenter.models.query.filters.FieldFilter)"
  - "com.microsoft.store.partnercenter.models.query.QueryFactory.buildIndexedQuery(int,int,com.microsoft.store.partnercenter.models.query.filters.FieldFilter,com.microsoft.store.partnercenter.models.query.sort.Sort)"
  - "com.microsoft.store.partnercenter.models.query.QueryFactory.buildIndexedQuery(int,int,com.microsoft.store.partnercenter.models.query.filters.FieldFilter,com.microsoft.store.partnercenter.models.query.sort.Sort,java.lang.Object)"
  - "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSeekQuery(com.microsoft.store.partnercenter.models.query.SeekOperation)"
  - "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSeekQuery(com.microsoft.store.partnercenter.models.query.SeekOperation,int)"
  - "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSeekQuery(com.microsoft.store.partnercenter.models.query.SeekOperation,int,int)"
  - "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSeekQuery(com.microsoft.store.partnercenter.models.query.SeekOperation,int,int,com.microsoft.store.partnercenter.models.query.filters.FieldFilter)"
  - "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSeekQuery(com.microsoft.store.partnercenter.models.query.SeekOperation,int,int,com.microsoft.store.partnercenter.models.query.filters.FieldFilter,com.microsoft.store.partnercenter.models.query.sort.Sort)"
  - "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSeekQuery(com.microsoft.store.partnercenter.models.query.SeekOperation,int,int,com.microsoft.store.partnercenter.models.query.filters.FieldFilter,com.microsoft.store.partnercenter.models.query.sort.Sort,java.lang.Object)"
  - "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSimpleQuery()"
  - "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSimpleQuery(com.microsoft.store.partnercenter.models.query.filters.FieldFilter)"
  - "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSimpleQuery(com.microsoft.store.partnercenter.models.query.filters.FieldFilter,com.microsoft.store.partnercenter.models.query.sort.Sort)"
  - "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSimpleQuery(com.microsoft.store.partnercenter.models.query.filters.FieldFilter,com.microsoft.store.partnercenter.models.query.sort.Sort,java.lang.Object)"
  - "com.microsoft.store.partnercenter.models.query.QueryFactory.getInstance()"
  langs:
  - "java"
  name: "QueryFactory"
  nameWithType: "QueryFactory"
  fullName: "com.microsoft.store.partnercenter.models.query.QueryFactory"
  type: "Class"
  package: "com.microsoft.store.partnercenter.models.query"
  summary: "Creates new instances of IQuery objects."
  syntax:
    content: "public class QueryFactory"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.store.partnercenter.models.query.QueryFactory.QueryFactory()"
  id: "QueryFactory()"
  parent: "com.microsoft.store.partnercenter.models.query.QueryFactory"
  langs:
  - "java"
  name: "QueryFactory()"
  nameWithType: "QueryFactory.QueryFactory()"
  fullName: "com.microsoft.store.partnercenter.models.query.QueryFactory.QueryFactory()"
  overload: "com.microsoft.store.partnercenter.models.query.QueryFactory.QueryFactory*"
  type: "Constructor"
  package: "com.microsoft.store.partnercenter.models.query"
  summary: "Prevents a default instance of the QueryFactory class from being created."
  syntax:
    content: "private QueryFactory()"
- uid: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildCountQuery()"
  id: "buildCountQuery()"
  parent: "com.microsoft.store.partnercenter.models.query.QueryFactory"
  langs:
  - "java"
  name: "buildCountQuery()"
  nameWithType: "QueryFactory.buildCountQuery()"
  fullName: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildCountQuery()"
  overload: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildCountQuery*"
  type: "Method"
  package: "com.microsoft.store.partnercenter.models.query"
  summary: "Builds a count query."
  syntax:
    content: "public IQuery buildCountQuery()"
    return:
      type: "com.microsoft.store.partnercenter.models.query.IQuery"
      description: "A count query."
- uid: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildCountQuery(com.microsoft.store.partnercenter.models.query.filters.FieldFilter)"
  id: "buildCountQuery(com.microsoft.store.partnercenter.models.query.filters.FieldFilter)"
  parent: "com.microsoft.store.partnercenter.models.query.QueryFactory"
  langs:
  - "java"
  name: "buildCountQuery(FieldFilter filter)"
  nameWithType: "QueryFactory.buildCountQuery(FieldFilter filter)"
  fullName: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildCountQuery(FieldFilter filter)"
  overload: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildCountQuery*"
  type: "Method"
  package: "com.microsoft.store.partnercenter.models.query"
  summary: "Builds a count query."
  syntax:
    content: "public IQuery buildCountQuery(FieldFilter filter)"
    parameters:
    - id: "filter"
      type: "com.microsoft.store.partnercenter.models.query.filters.FieldFilter"
      description: "An optional filter."
    return:
      type: "com.microsoft.store.partnercenter.models.query.IQuery"
      description: "A count query."
- uid: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildCountQuery(com.microsoft.store.partnercenter.models.query.filters.FieldFilter,java.lang.Object)"
  id: "buildCountQuery(com.microsoft.store.partnercenter.models.query.filters.FieldFilter,java.lang.Object)"
  parent: "com.microsoft.store.partnercenter.models.query.QueryFactory"
  langs:
  - "java"
  name: "buildCountQuery(FieldFilter filter, Object token)"
  nameWithType: "QueryFactory.buildCountQuery(FieldFilter filter, Object token)"
  fullName: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildCountQuery(FieldFilter filter, Object token)"
  overload: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildCountQuery*"
  type: "Method"
  package: "com.microsoft.store.partnercenter.models.query"
  summary: "Builds a count query."
  syntax:
    content: "public IQuery buildCountQuery(FieldFilter filter, Object token)"
    parameters:
    - id: "filter"
      type: "com.microsoft.store.partnercenter.models.query.filters.FieldFilter"
      description: "An optional filter."
    - id: "token"
      type: "java.lang.Object"
      description: "Optional query token."
    return:
      type: "com.microsoft.store.partnercenter.models.query.IQuery"
      description: "A count query."
- uid: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildIndexedQuery(int)"
  id: "buildIndexedQuery(int)"
  parent: "com.microsoft.store.partnercenter.models.query.QueryFactory"
  langs:
  - "java"
  name: "buildIndexedQuery(int pageSize)"
  nameWithType: "QueryFactory.buildIndexedQuery(int pageSize)"
  fullName: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildIndexedQuery(int pageSize)"
  overload: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildIndexedQuery*"
  type: "Method"
  package: "com.microsoft.store.partnercenter.models.query"
  summary: "Builds an indexed query."
  syntax:
    content: "public IQuery buildIndexedQuery(int pageSize)"
    parameters:
    - id: "pageSize"
      type: "int"
      description: "The number of results to return."
    return:
      type: "com.microsoft.store.partnercenter.models.query.IQuery"
      description: "A paged query."
- uid: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildIndexedQuery(int,int)"
  id: "buildIndexedQuery(int,int)"
  parent: "com.microsoft.store.partnercenter.models.query.QueryFactory"
  langs:
  - "java"
  name: "buildIndexedQuery(int pageSize, int index)"
  nameWithType: "QueryFactory.buildIndexedQuery(int pageSize, int index)"
  fullName: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildIndexedQuery(int pageSize, int index)"
  overload: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildIndexedQuery*"
  type: "Method"
  package: "com.microsoft.store.partnercenter.models.query"
  summary: "Builds an indexed query."
  syntax:
    content: "public IQuery buildIndexedQuery(int pageSize, int index)"
    parameters:
    - id: "pageSize"
      type: "int"
      description: "The number of results to return."
    - id: "index"
      type: "int"
      description: "The results starting index."
    return:
      type: "com.microsoft.store.partnercenter.models.query.IQuery"
      description: "A paged query."
- uid: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildIndexedQuery(int,int,com.microsoft.store.partnercenter.models.query.filters.FieldFilter)"
  id: "buildIndexedQuery(int,int,com.microsoft.store.partnercenter.models.query.filters.FieldFilter)"
  parent: "com.microsoft.store.partnercenter.models.query.QueryFactory"
  langs:
  - "java"
  name: "buildIndexedQuery(int pageSize, int index, FieldFilter filter)"
  nameWithType: "QueryFactory.buildIndexedQuery(int pageSize, int index, FieldFilter filter)"
  fullName: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildIndexedQuery(int pageSize, int index, FieldFilter filter)"
  overload: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildIndexedQuery*"
  type: "Method"
  package: "com.microsoft.store.partnercenter.models.query"
  summary: "Builds an indexed query."
  syntax:
    content: "public IQuery buildIndexedQuery(int pageSize, int index, FieldFilter filter)"
    parameters:
    - id: "pageSize"
      type: "int"
      description: "The number of results to return."
    - id: "index"
      type: "int"
      description: "The results starting index."
    - id: "filter"
      type: "com.microsoft.store.partnercenter.models.query.filters.FieldFilter"
      description: "An optional filter."
    return:
      type: "com.microsoft.store.partnercenter.models.query.IQuery"
      description: "A paged query."
- uid: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildIndexedQuery(int,int,com.microsoft.store.partnercenter.models.query.filters.FieldFilter,com.microsoft.store.partnercenter.models.query.sort.Sort)"
  id: "buildIndexedQuery(int,int,com.microsoft.store.partnercenter.models.query.filters.FieldFilter,com.microsoft.store.partnercenter.models.query.sort.Sort)"
  parent: "com.microsoft.store.partnercenter.models.query.QueryFactory"
  langs:
  - "java"
  name: "buildIndexedQuery(int pageSize, int index, FieldFilter filter, Sort sortOption)"
  nameWithType: "QueryFactory.buildIndexedQuery(int pageSize, int index, FieldFilter filter, Sort sortOption)"
  fullName: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildIndexedQuery(int pageSize, int index, FieldFilter filter, Sort sortOption)"
  overload: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildIndexedQuery*"
  type: "Method"
  package: "com.microsoft.store.partnercenter.models.query"
  summary: "Builds an indexed query."
  syntax:
    content: "public IQuery buildIndexedQuery(int pageSize, int index, FieldFilter filter, Sort sortOption)"
    parameters:
    - id: "pageSize"
      type: "int"
      description: "The number of results to return."
    - id: "index"
      type: "int"
      description: "The results starting index."
    - id: "filter"
      type: "com.microsoft.store.partnercenter.models.query.filters.FieldFilter"
      description: "An optional filter."
    - id: "sortOption"
      type: "com.microsoft.store.partnercenter.models.query.sort.Sort"
      description: "An optional sorting options."
    return:
      type: "com.microsoft.store.partnercenter.models.query.IQuery"
      description: "A paged query."
- uid: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildIndexedQuery(int,int,com.microsoft.store.partnercenter.models.query.filters.FieldFilter,com.microsoft.store.partnercenter.models.query.sort.Sort,java.lang.Object)"
  id: "buildIndexedQuery(int,int,com.microsoft.store.partnercenter.models.query.filters.FieldFilter,com.microsoft.store.partnercenter.models.query.sort.Sort,java.lang.Object)"
  parent: "com.microsoft.store.partnercenter.models.query.QueryFactory"
  langs:
  - "java"
  name: "buildIndexedQuery(int pageSize, int index, FieldFilter filter, Sort sortOption, Object token)"
  nameWithType: "QueryFactory.buildIndexedQuery(int pageSize, int index, FieldFilter filter, Sort sortOption, Object token)"
  fullName: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildIndexedQuery(int pageSize, int index, FieldFilter filter, Sort sortOption, Object token)"
  overload: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildIndexedQuery*"
  type: "Method"
  package: "com.microsoft.store.partnercenter.models.query"
  summary: "Builds an indexed query."
  syntax:
    content: "public IQuery buildIndexedQuery(int pageSize, int index, FieldFilter filter, Sort sortOption, Object token)"
    parameters:
    - id: "pageSize"
      type: "int"
      description: "The number of results to return."
    - id: "index"
      type: "int"
      description: "The results starting index."
    - id: "filter"
      type: "com.microsoft.store.partnercenter.models.query.filters.FieldFilter"
      description: "An optional filter."
    - id: "sortOption"
      type: "com.microsoft.store.partnercenter.models.query.sort.Sort"
      description: "An optional sorting options."
    - id: "token"
      type: "java.lang.Object"
      description: "An optional query token."
    return:
      type: "com.microsoft.store.partnercenter.models.query.IQuery"
      description: "A paged query."
- uid: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSeekQuery(com.microsoft.store.partnercenter.models.query.SeekOperation)"
  id: "buildSeekQuery(com.microsoft.store.partnercenter.models.query.SeekOperation)"
  parent: "com.microsoft.store.partnercenter.models.query.QueryFactory"
  langs:
  - "java"
  name: "buildSeekQuery(SeekOperation seekOperation)"
  nameWithType: "QueryFactory.buildSeekQuery(SeekOperation seekOperation)"
  fullName: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSeekQuery(SeekOperation seekOperation)"
  overload: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSeekQuery*"
  type: "Method"
  package: "com.microsoft.store.partnercenter.models.query"
  summary: "Builds a seek query."
  syntax:
    content: "public IQuery buildSeekQuery(SeekOperation seekOperation)"
    parameters:
    - id: "seekOperation"
      type: "com.microsoft.store.partnercenter.models.query.SeekOperation"
      description: "The seek operation to perform."
    return:
      type: "com.microsoft.store.partnercenter.models.query.IQuery"
      description: "The seek query."
- uid: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSeekQuery(com.microsoft.store.partnercenter.models.query.SeekOperation,int)"
  id: "buildSeekQuery(com.microsoft.store.partnercenter.models.query.SeekOperation,int)"
  parent: "com.microsoft.store.partnercenter.models.query.QueryFactory"
  langs:
  - "java"
  name: "buildSeekQuery(SeekOperation seekOperation, int pageSize)"
  nameWithType: "QueryFactory.buildSeekQuery(SeekOperation seekOperation, int pageSize)"
  fullName: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSeekQuery(SeekOperation seekOperation, int pageSize)"
  overload: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSeekQuery*"
  type: "Method"
  package: "com.microsoft.store.partnercenter.models.query"
  summary: "Builds a seek query."
  syntax:
    content: "public IQuery buildSeekQuery(SeekOperation seekOperation, int pageSize)"
    parameters:
    - id: "seekOperation"
      type: "com.microsoft.store.partnercenter.models.query.SeekOperation"
      description: "The seek operation to perform."
    - id: "pageSize"
      type: "int"
      description: "The desired result page size."
    return:
      type: "com.microsoft.store.partnercenter.models.query.IQuery"
      description: "The seek query."
- uid: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSeekQuery(com.microsoft.store.partnercenter.models.query.SeekOperation,int,int)"
  id: "buildSeekQuery(com.microsoft.store.partnercenter.models.query.SeekOperation,int,int)"
  parent: "com.microsoft.store.partnercenter.models.query.QueryFactory"
  langs:
  - "java"
  name: "buildSeekQuery(SeekOperation seekOperation, int pageSize, int index)"
  nameWithType: "QueryFactory.buildSeekQuery(SeekOperation seekOperation, int pageSize, int index)"
  fullName: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSeekQuery(SeekOperation seekOperation, int pageSize, int index)"
  overload: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSeekQuery*"
  type: "Method"
  package: "com.microsoft.store.partnercenter.models.query"
  summary: "Builds a seek query."
  syntax:
    content: "public IQuery buildSeekQuery(SeekOperation seekOperation, int pageSize, int index)"
    parameters:
    - id: "seekOperation"
      type: "com.microsoft.store.partnercenter.models.query.SeekOperation"
      description: "The seek operation to perform."
    - id: "pageSize"
      type: "int"
      description: "The desired result page size."
    - id: "index"
      type: "int"
      description: "The index of the page to retrieve. This is only used if the seek operation specified a page index."
    return:
      type: "com.microsoft.store.partnercenter.models.query.IQuery"
      description: "The seek query."
- uid: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSeekQuery(com.microsoft.store.partnercenter.models.query.SeekOperation,int,int,com.microsoft.store.partnercenter.models.query.filters.FieldFilter)"
  id: "buildSeekQuery(com.microsoft.store.partnercenter.models.query.SeekOperation,int,int,com.microsoft.store.partnercenter.models.query.filters.FieldFilter)"
  parent: "com.microsoft.store.partnercenter.models.query.QueryFactory"
  langs:
  - "java"
  name: "buildSeekQuery(SeekOperation seekOperation, int pageSize, int index, FieldFilter filter)"
  nameWithType: "QueryFactory.buildSeekQuery(SeekOperation seekOperation, int pageSize, int index, FieldFilter filter)"
  fullName: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSeekQuery(SeekOperation seekOperation, int pageSize, int index, FieldFilter filter)"
  overload: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSeekQuery*"
  type: "Method"
  package: "com.microsoft.store.partnercenter.models.query"
  summary: "Builds a seek query."
  syntax:
    content: "public IQuery buildSeekQuery(SeekOperation seekOperation, int pageSize, int index, FieldFilter filter)"
    parameters:
    - id: "seekOperation"
      type: "com.microsoft.store.partnercenter.models.query.SeekOperation"
      description: "The seek operation to perform."
    - id: "pageSize"
      type: "int"
      description: "The desired result page size."
    - id: "index"
      type: "int"
      description: "The index of the page to retrieve. This is only used if the seek operation specified a page index."
    - id: "filter"
      type: "com.microsoft.store.partnercenter.models.query.filters.FieldFilter"
      description: "An optional filter to apply."
    return:
      type: "com.microsoft.store.partnercenter.models.query.IQuery"
      description: "The seek query."
- uid: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSeekQuery(com.microsoft.store.partnercenter.models.query.SeekOperation,int,int,com.microsoft.store.partnercenter.models.query.filters.FieldFilter,com.microsoft.store.partnercenter.models.query.sort.Sort)"
  id: "buildSeekQuery(com.microsoft.store.partnercenter.models.query.SeekOperation,int,int,com.microsoft.store.partnercenter.models.query.filters.FieldFilter,com.microsoft.store.partnercenter.models.query.sort.Sort)"
  parent: "com.microsoft.store.partnercenter.models.query.QueryFactory"
  langs:
  - "java"
  name: "buildSeekQuery(SeekOperation seekOperation, int pageSize, int index, FieldFilter filter, Sort sortingOption)"
  nameWithType: "QueryFactory.buildSeekQuery(SeekOperation seekOperation, int pageSize, int index, FieldFilter filter, Sort sortingOption)"
  fullName: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSeekQuery(SeekOperation seekOperation, int pageSize, int index, FieldFilter filter, Sort sortingOption)"
  overload: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSeekQuery*"
  type: "Method"
  package: "com.microsoft.store.partnercenter.models.query"
  summary: "Builds a seek query."
  syntax:
    content: "public IQuery buildSeekQuery(SeekOperation seekOperation, int pageSize, int index, FieldFilter filter, Sort sortingOption)"
    parameters:
    - id: "seekOperation"
      type: "com.microsoft.store.partnercenter.models.query.SeekOperation"
      description: "The seek operation to perform."
    - id: "pageSize"
      type: "int"
      description: "The desired result page size."
    - id: "index"
      type: "int"
      description: "The index of the page to retrieve. This is only used if the seek operation specified a page index."
    - id: "filter"
      type: "com.microsoft.store.partnercenter.models.query.filters.FieldFilter"
      description: "An optional filter to apply."
    - id: "sortingOption"
      type: "com.microsoft.store.partnercenter.models.query.sort.Sort"
      description: "An optional sorting options."
    return:
      type: "com.microsoft.store.partnercenter.models.query.IQuery"
      description: "The seek query."
- uid: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSeekQuery(com.microsoft.store.partnercenter.models.query.SeekOperation,int,int,com.microsoft.store.partnercenter.models.query.filters.FieldFilter,com.microsoft.store.partnercenter.models.query.sort.Sort,java.lang.Object)"
  id: "buildSeekQuery(com.microsoft.store.partnercenter.models.query.SeekOperation,int,int,com.microsoft.store.partnercenter.models.query.filters.FieldFilter,com.microsoft.store.partnercenter.models.query.sort.Sort,java.lang.Object)"
  parent: "com.microsoft.store.partnercenter.models.query.QueryFactory"
  langs:
  - "java"
  name: "buildSeekQuery(SeekOperation seekOperation, int pageSize, int index, FieldFilter filter, Sort sortingOption, Object token)"
  nameWithType: "QueryFactory.buildSeekQuery(SeekOperation seekOperation, int pageSize, int index, FieldFilter filter, Sort sortingOption, Object token)"
  fullName: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSeekQuery(SeekOperation seekOperation, int pageSize, int index, FieldFilter filter, Sort sortingOption, Object token)"
  overload: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSeekQuery*"
  type: "Method"
  package: "com.microsoft.store.partnercenter.models.query"
  summary: "Builds a seek query."
  syntax:
    content: "public IQuery buildSeekQuery(SeekOperation seekOperation, int pageSize, int index, FieldFilter filter, Sort sortingOption, Object token)"
    parameters:
    - id: "seekOperation"
      type: "com.microsoft.store.partnercenter.models.query.SeekOperation"
      description: "The seek operation to perform."
    - id: "pageSize"
      type: "int"
      description: "The desired result page size."
    - id: "index"
      type: "int"
      description: "The index of the page to retrieve. This is only used if the seek operation specified a page index."
    - id: "filter"
      type: "com.microsoft.store.partnercenter.models.query.filters.FieldFilter"
      description: "An optional filter to apply."
    - id: "sortingOption"
      type: "com.microsoft.store.partnercenter.models.query.sort.Sort"
      description: "An optional sorting options."
    - id: "token"
      type: "java.lang.Object"
      description: "An optional query token."
    return:
      type: "com.microsoft.store.partnercenter.models.query.IQuery"
      description: "The seek query."
- uid: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSimpleQuery()"
  id: "buildSimpleQuery()"
  parent: "com.microsoft.store.partnercenter.models.query.QueryFactory"
  langs:
  - "java"
  name: "buildSimpleQuery()"
  nameWithType: "QueryFactory.buildSimpleQuery()"
  fullName: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSimpleQuery()"
  overload: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSimpleQuery*"
  type: "Method"
  package: "com.microsoft.store.partnercenter.models.query"
  summary: "Builds a simple query."
  syntax:
    content: "public IQuery buildSimpleQuery()"
    return:
      type: "com.microsoft.store.partnercenter.models.query.IQuery"
      description: "A simple query."
- uid: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSimpleQuery(com.microsoft.store.partnercenter.models.query.filters.FieldFilter)"
  id: "buildSimpleQuery(com.microsoft.store.partnercenter.models.query.filters.FieldFilter)"
  parent: "com.microsoft.store.partnercenter.models.query.QueryFactory"
  langs:
  - "java"
  name: "buildSimpleQuery(FieldFilter filter)"
  nameWithType: "QueryFactory.buildSimpleQuery(FieldFilter filter)"
  fullName: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSimpleQuery(FieldFilter filter)"
  overload: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSimpleQuery*"
  type: "Method"
  package: "com.microsoft.store.partnercenter.models.query"
  summary: "Builds a simple query."
  syntax:
    content: "public IQuery buildSimpleQuery(FieldFilter filter)"
    parameters:
    - id: "filter"
      type: "com.microsoft.store.partnercenter.models.query.filters.FieldFilter"
      description: "An optional filter."
    return:
      type: "com.microsoft.store.partnercenter.models.query.IQuery"
      description: "A simple query."
- uid: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSimpleQuery(com.microsoft.store.partnercenter.models.query.filters.FieldFilter,com.microsoft.store.partnercenter.models.query.sort.Sort)"
  id: "buildSimpleQuery(com.microsoft.store.partnercenter.models.query.filters.FieldFilter,com.microsoft.store.partnercenter.models.query.sort.Sort)"
  parent: "com.microsoft.store.partnercenter.models.query.QueryFactory"
  langs:
  - "java"
  name: "buildSimpleQuery(FieldFilter filter, Sort sortOption)"
  nameWithType: "QueryFactory.buildSimpleQuery(FieldFilter filter, Sort sortOption)"
  fullName: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSimpleQuery(FieldFilter filter, Sort sortOption)"
  overload: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSimpleQuery*"
  type: "Method"
  package: "com.microsoft.store.partnercenter.models.query"
  summary: "Builds a simple query."
  syntax:
    content: "public IQuery buildSimpleQuery(FieldFilter filter, Sort sortOption)"
    parameters:
    - id: "filter"
      type: "com.microsoft.store.partnercenter.models.query.filters.FieldFilter"
      description: "An optional filter."
    - id: "sortOption"
      type: "com.microsoft.store.partnercenter.models.query.sort.Sort"
      description: "Optional sorting options."
    return:
      type: "com.microsoft.store.partnercenter.models.query.IQuery"
      description: "A simple query."
- uid: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSimpleQuery(com.microsoft.store.partnercenter.models.query.filters.FieldFilter,com.microsoft.store.partnercenter.models.query.sort.Sort,java.lang.Object)"
  id: "buildSimpleQuery(com.microsoft.store.partnercenter.models.query.filters.FieldFilter,com.microsoft.store.partnercenter.models.query.sort.Sort,java.lang.Object)"
  parent: "com.microsoft.store.partnercenter.models.query.QueryFactory"
  langs:
  - "java"
  name: "buildSimpleQuery(FieldFilter filter, Sort sortOption, Object token)"
  nameWithType: "QueryFactory.buildSimpleQuery(FieldFilter filter, Sort sortOption, Object token)"
  fullName: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSimpleQuery(FieldFilter filter, Sort sortOption, Object token)"
  overload: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSimpleQuery*"
  type: "Method"
  package: "com.microsoft.store.partnercenter.models.query"
  summary: "Builds a simple query."
  syntax:
    content: "public IQuery buildSimpleQuery(FieldFilter filter, Sort sortOption, Object token)"
    parameters:
    - id: "filter"
      type: "com.microsoft.store.partnercenter.models.query.filters.FieldFilter"
      description: "An optional filter."
    - id: "sortOption"
      type: "com.microsoft.store.partnercenter.models.query.sort.Sort"
      description: "Optional sorting options."
    - id: "token"
      type: "java.lang.Object"
      description: "Optional query token."
    return:
      type: "com.microsoft.store.partnercenter.models.query.IQuery"
      description: "A simple query."
- uid: "com.microsoft.store.partnercenter.models.query.QueryFactory.getInstance()"
  id: "getInstance()"
  parent: "com.microsoft.store.partnercenter.models.query.QueryFactory"
  langs:
  - "java"
  name: "getInstance()"
  nameWithType: "QueryFactory.getInstance()"
  fullName: "com.microsoft.store.partnercenter.models.query.QueryFactory.getInstance()"
  overload: "com.microsoft.store.partnercenter.models.query.QueryFactory.getInstance*"
  type: "Method"
  package: "com.microsoft.store.partnercenter.models.query"
  summary: "Gets an instance of the query factory."
  syntax:
    content: "public static QueryFactory getInstance()"
    return:
      type: "com.microsoft.store.partnercenter.models.query.QueryFactory"
      description: "An instance of the query factory."
references:
- uid: "com.microsoft.store.partnercenter.models.query.QueryFactory.QueryFactory*"
  name: "QueryFactory"
  nameWithType: "QueryFactory.QueryFactory"
  fullName: "com.microsoft.store.partnercenter.models.query.QueryFactory.QueryFactory"
  package: "com.microsoft.store.partnercenter.models.query"
- uid: "com.microsoft.store.partnercenter.models.query.QueryFactory.getInstance*"
  name: "getInstance"
  nameWithType: "QueryFactory.getInstance"
  fullName: "com.microsoft.store.partnercenter.models.query.QueryFactory.getInstance"
  package: "com.microsoft.store.partnercenter.models.query"
- uid: "com.microsoft.store.partnercenter.models.query.filters.FieldFilter"
  name: "FieldFilter"
  nameWithType: "FieldFilter"
  fullName: "com.microsoft.store.partnercenter.models.query.filters.FieldFilter"
- uid: "com.microsoft.store.partnercenter.models.query.sort.Sort"
  name: "Sort"
  nameWithType: "Sort"
  fullName: "com.microsoft.store.partnercenter.models.query.sort.Sort"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "com.microsoft.store.partnercenter.models.query.IQuery"
  name: "IQuery"
  nameWithType: "IQuery"
  fullName: "com.microsoft.store.partnercenter.models.query.IQuery"
- uid: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSimpleQuery*"
  name: "buildSimpleQuery"
  nameWithType: "QueryFactory.buildSimpleQuery"
  fullName: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSimpleQuery"
  package: "com.microsoft.store.partnercenter.models.query"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildIndexedQuery*"
  name: "buildIndexedQuery"
  nameWithType: "QueryFactory.buildIndexedQuery"
  fullName: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildIndexedQuery"
  package: "com.microsoft.store.partnercenter.models.query"
- uid: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildCountQuery*"
  name: "buildCountQuery"
  nameWithType: "QueryFactory.buildCountQuery"
  fullName: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildCountQuery"
  package: "com.microsoft.store.partnercenter.models.query"
- uid: "com.microsoft.store.partnercenter.models.query.SeekOperation"
  name: "SeekOperation"
  nameWithType: "SeekOperation"
  fullName: "com.microsoft.store.partnercenter.models.query.SeekOperation"
- uid: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSeekQuery*"
  name: "buildSeekQuery"
  nameWithType: "QueryFactory.buildSeekQuery"
  fullName: "com.microsoft.store.partnercenter.models.query.QueryFactory.buildSeekQuery"
  package: "com.microsoft.store.partnercenter.models.query"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
